/** * @author  */imports("Controls.Form.ListBox");using("Controls.Core.ListControl");using("Controls.Form.IInput");var ListBox = ListControl.extend(IInput).implement({		xType: 'listbox',		/**	 * 当一个选项被选中时触发。	 */	onSelect: function (value){		return this.trigger('select', value);	},		init: function(options){		var select;		if(this.dom.tagName === 'SELECT'){			select = this.dom;			this.dom = this.create(options);			select.parentNode.replaceChild(this.dom, select);		}				this.base('init');					this.on('click', this.onClick);				if(select)			this.copyItemsFromSelect(select);			},		onClick: function (e) {		if(this.getDisabled() || this.getReadOnly())			return;		var me = this.controls, ul = this.container.dom, node = e.target;		while(node){			if(node.parentNode === ul){				for(var i = me.length; i--;){					if(me[i].dom.parentNode === node){						this.onItemClick(e, me[i]);						return;					}				}				break;			}			node = node.parentNode;		}	},		/**	 * 当用户点击一项时触发。	 */	onItemClick: function (e, item) {		if(this.onSelect(item)) {			this.toggleItem(item);		} else {			e.stop();		}	},		setName: function (value) {		if(!this.formProxy){			this.formProxy = Dom.parseNode('<input type="hidden">');			this.formProxy.value = this.getValue();			this.dom.appendChild(this.formProxy);		}				this.formProxy.name = value;		return this;			},		getName: function () {		return this.formProxy && this.formProxy.name;	},		/**	 * 获取选中项的值，如果每天项被选中，则返回 null 。	 */	getValue: function(){		return this.selectedItem ? this.baseGetValue(this.selectedItem) : this.formProxy ? this.formProxy.value : null;	},		/**	 * 查找并选中指定值内容的项。如果没有项的值和当前项相同，则清空选择状态。	 */	setValue: function(value){				// 默认设置为值。		if(this.formProxy)			this.formProxy.value = value;				if(this.controls.each(function(item){			if(this.baseGetValue(item) === value){				this.setSelectedItem(item);				return false;			}		}, this))			this.clear();				return this;	},		getForm: function () {		return Dom.get(this.formProxy && this.formProxy.form);	},		clear: ListControl.prototype.clear,		/**	 * 当选区发生改变时触发。	 */	onSelectionChanged: function(){				// 如果存在代理元素，则同步更新代理元素的值。		if(this.formProxy)			this.formProxy.value = this.getValue();	},		copyItemsFromSelect: function(select){		if(select.name){			this.setName(select.name);			select.name = '';		}		for(var node = select.firstChild; node; node = node.nextSibling) {			if(node.tagName  === 'OPTION') {				var item = this.controls.add(Dom.getText(node));									item.value = node.value;				if(node.selected){					this.setSelectedItem(item);				}			}		}				if(select.onclick)			this.dom.onclick = select.onclick;				if(select.onchange)			this.on('change', select.onchange);			}	}).addEvents({select:{}, change:{}});