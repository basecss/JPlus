/** * @author  xuld */imports("Controls.Core.ListControl");using("Controls.Core.ScrollableControl");/** * 表示所有管理多个有序列的子控件的控件基类。 * @class ListControl * @extends ScrollableControl * ListControl 封装了使用  &lt;ul&gt; 创建列表控件一系列方法。 */var ListControl = ScrollableControl.extend({		onControlAdded: function(childControl, index){		var li = Dom.create('li', 'x-' + this.xType + '-content');		index = this.controls[index];		this.container.insertBefore(li, index && index.getParent());		li.append(childControl);	},		onControlRemoved: function(childControl, index){		var li = childControl.getParent();		li.removeChild(childControl);		this.container.removeChild(li);	},		create: function(){		return document.createElement('div');	},		init: function(options){		this.items = this.controls;		this.addClass('x-' + this.xType);				// 获取容器。		var container = this.getFirst('ul');		if(container) {			// 已经存在了一个 UL 标签，转换为 items 属性。			container.query('>li').each(function(value){				value = Dom.get(value).addClass('x-' + this.xType + '-content');				var c = value.getFirst(true);				c = c ? c.getNext(true) ? value.getChildren() : c : new Dom(document.createTextNode(''));				this.items[this.items.length++] = c;				if(value.hasClass('x-' + this.xType + '-selected') || value.hasClass('x-selected')) {					this.selectedItem = c;					this.onSelectionChanged();				}			}, this);		} else {			container = Dom.create('ul', '');			this.dom.appendChild(container.dom);		}		this.container = container.addClass('x-' + this.xType + '-container');	},		// 选择功能		/**	 * 底层获取某项的选中状态。该函数仅仅检查界面。	 */	baseGetSelected: function (item) {		return item.getParent().hasClass('x-' + this.xType + '-selected');	},		/**	 * 底层设置某项的选中状态。该函数仅仅更新界面。	 */	baseSetSelected: function (item, value) {		item.getParent().toggleClass('x-' + this.xType + '-selected', value);		return this;	},		/**	 * 底层获取一项的值。	 */	baseGetValue: function(item){		return item.value !== undefined ? item.value : item.getText();	},		/**	 * 当前的选中项。
	 */	selectedItem: null,		/**	 * 当选中的项被更新后触发。	 */	onChange: function (value){		this.trigger('change', value);	},		/**	 * 当选区发生改变时触发。
	 */	onSelectionChanged: Function.empty,		/**	 * 获取当前选中项的索引。
	 */	getSelectedIndex: function () {		return this.controls.indexOf(this.getSelectedItem());	},		/**	 * 设置当前选中项的索引。	 */	setSelectedIndex: function (value) {		return this.setSelectedItem(this.controls[value]);	},		/**	 * 获取当前选中的项。如果不存在选中的项，则返回 null 。	 */	getSelectedItem: function () {		return this.selectedItem;	},		/**	 * 设置某一项为选中状态。对于单选框，该函数会同时清除已有的选择项。	 */	setSelectedItem: function(item){		assert(item, "ListBox.prototype.setSelectedItem(item): {item} 不能为空。", item);				// 先反选当前选择项。		var old = this.selectedItem;		if(old)			this.baseSetSelected(old, false);					// 更新选择项。		this.selectedItem = item;		this.baseSetSelected(item, true);				// 触发一些事件。		this.onSelectionChanged();				if(old !== item)			this.onChange(item);	},		/**	 * 获取指定索引的项的选择状态。	 */	getSelected: function (index) {		if(index = this.controls[index]) {			return this.baseGetSelected(index);		}		return false;	},		/**	 * 设置指定索引的项的选择状态。但不会清空已有项。	 */	setSelected: function (index, value) {		if(index = this.controls[index]) {			var old = this.baseGetSelected(index);			this.baseSetSelected(index, value);			this.onSelectionChanged();			if(old !== value)				this.onChange(index);		}				return this;	},		/**	 * 获取选中项的文本内容。	 */	getText: function () {		return this.selectedItem ? this.selectedItem.getText() : '';	},		/**	 * 查找并选中指定文本内容的项。如果没有项的文本和当前项相同，则清空选择状态。	 */	setText: function (value) {		if(this.controls.each(function(item){			if(item.getText() === value){				this.setSelectedItem(item);				return false;			}		}, this))			this.clear();				return this;	},		/**	 * 切换某一项的选择状态。	 */	toggleItem: function(item){				// 如果当前项已选中，则表示反选当前的项。		if(item === this.selectedItem){			this.clear();		} else {						// 否则，重新选择某一项。			this.setSelectedItem(item);		}				return  this;	},		/**	 * 反选择一项。	 */	clear: function () {		var item = this.selectedItem;		if(item){			this.selectedItem = null;			this.baseSetSelected(item, false);			this.onSelectionChanged();			this.onChange(item);		}					return  this;	},		/**	 * 确保当前有至少一项被选择。	 */	select: function () {		if(!this.selectedItem) {			this.setSelectedIndex(0);		}				return this;	}	});