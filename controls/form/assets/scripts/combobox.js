/** * @author  */using("Controls.Core.IDropDownMenuContainer");using("Controls.Form.CombinedTextBox");using("Controls.Form.ListBox");var ComboBox = CombinedTextBox.extend({		xType: 'combobox',		onKeyDown: function(e){		switch(e.keyCode) {			case 40:			case 38:				this.showDropDownMenu();				var newIndex, maxIndex = this.controls.length - 1, down = e.keyCode === 40 ;				if(this._currentIndex != undefined) {					this.dropDownMenu.setItemSelected(this.controls[this._currentIndex], false);					newIndex = this._currentIndex + ( down ? 1 : -1);					if(newIndex < 0) newIndex = maxIndex;					else if(newIndex > maxIndex) newIndex = 0;				} else {					newIndex = down ? 0 : maxIndex;				}				this._currentIndex = newIndex;				this.dropDownMenu.setItemSelected(this.controls[newIndex], true);			    e.preventDefault();			    return;			case 13:								if(this._currentIndex != undefined) {					this.dropDownMenu.setSelectedIndex(this._currentIndex);					e.preventDefault();				}		}	},		onChange: function (e) {
		return this.trigger('change', e);
	},		init: function (options) {		// 创建并设置下拉菜单		var dropDownMenu = new ListBox();				this.setDropDownMenu(dropDownMenu);				// 绑定点击事件		dropDownMenu.on('change', this.onSelectItem, this);				// 绑定下拉菜单		this.items = this.controls = dropDownMenu.controls;				if(this.dom.tagName === 'SELECT') {			var select = this.dom;			this.dom = this.create(options);			select.parentNode.replaceChild(this.dom, select);			dropDownMenu.copyItemsFromSelect(select);		}				// 初始化文本框		this.base('init');				// 点击下拉菜单 执行菜单显示		this.bindMenuButton('click', this.toggleDropDownMenu);				// 设置下拉菜单样式		this.setMenuButton('down');				this.on('keydown', this.onKeyDown);		this.dom.onchange = Function.bind(this.onChange, this);	},		setDropDownList: function (value) {		this.dom.readOnly = value !== false;
		return this;
	},		getValue: function(){		return this.dropDownMenu.getValue();	},		setValue: function(value){		this.dropDownMenu.setValue(value);		return this;	},		onSelectItem: function (value) {		this.setText(this.dropDownMenu.getText());				this.hideDropDownMenu();		this.dropDownMenu.setItemSelected(this.dropDownMenu.selectedItem, false);		this.dropDownMenu.selectedItem = null;		this._currentIndex = undefined;			}}).implement(IDropDownMenuContainer).addEvents({change:{}});