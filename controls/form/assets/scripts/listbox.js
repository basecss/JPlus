/** * @author  */imports("Controls.Form.ListBox");using("Controls.Core.ListControl");using("Controls.Form.IInputControl");var ListBox = ListControl.extend(IInputControl).implement({		xType: 'listbox',		/**	 * 设置某项的选中状态。	 */	getItemSelected: function (item) {		return item.getParent().hasClass('x-' + this.xType + '-selected');	},		/**	 * 设置某项的选中状态。	 */	setItemSelected: function (item, value) {		item.getParent().toggleClass('x-' + this.xType + '-selected', value);		return this;	},		init: function(options){		var select;		if(this.dom.tagName === 'SELECT'){			select = this.dom;			this.dom = this.create(options);			select.parentNode.replaceChild(this.dom, select);		}				this.base('init');				if(select)			this.copyItemsFromSelect(select);					this.on('click', this.onClick);	},		onItemClick: function (item, e) {		if(this.onChanging(item)) {			this.toggleItem(item);		}	},		onClick: function (e) {		if(this.getDisabled() || this.getReadOnly())			return;		var me = this.controls, ul = this.container.dom, node = e.target;		while(node){			if(node.parentNode === ul){				for(var i = me.length; i--;){					if(me[i].dom.parentNode === node){						this.onItemClick(me[i], e);						return;					}				}				break;			}			node = node.parentNode;		}	},		onChanging: function (value){		return this.trigger('changing', value);	},		onChanged: function (value){		if(this._proxy)			this._proxy.value = this.getValue();		return this.trigger('change', value);	},		selectedItem: null,		getSelectedIndex: function () {		return this.controls.indexOf(this.getSelectedItem());	},		setSelectedIndex: function (value) {		return this.setSelectedItem(this.controls[value]);	},		/**	 * 选择一项。	 */	setSelectedItem: function(item){		assert(item, "ListBox.prototype.setSelectedItem(item): {item} 不能为空。", item);		if(this.selectedItem)			this.setItemSelected(this.selectedItem, false);		this.selectedItem = item;		this.setItemSelected(item, true);		this.onChanged(item);	},		getSelectedItem: function () {		return this.selectedItem;	},		/**	 * 切换一项的选择状态。
	 */	toggleItem: function(item){		this.trigger('select', item);		if(item === this.selectedItem){			this.clear();		} else {			this.setSelectedItem(item);		}				return  this;	},		/**	 * 反选择一项。	 */	clear: function () {		var item = this.selectedItem;		if(item){			this.selectedItem = null;			this.setItemSelected(item, false);			this.onChanged(item);		}					return  this;
	},		select: function () {		if(!this.selectedItem) {			this.setSelectedIndex(0);		}				return this;	},		getSelected: function (index) {		if(index = this.controls[index]) {			return this.getItemSelected(index);		}		return false;	},		/**	 * 设置某项的选中状态。	 */	setSelected: function (index, value) {		if(index = this.controls[index]) {			this.setItemSelected(index, value);			this.onChanged(index);		}				return this;	},		setText: function (value) {		this.controls.each(function(item){			if(item.getText() === value){				this.setSelectedItem(item);				return false;			}		}, this);				return this;	},		getText: function () {		return this.selectedItem ? this.selectedItem.getText() : '';	},		setName: function (value) {
		if(!this._proxy){			this._proxy = Dom.parseNode('<input type="hidden">');			this._proxy.value = this.getValue();			this.dom.appendChild(this._proxy);		}				this._proxy.name = value;		return this;		
	},		getName: function () {
		return this._proxy && this._proxy.name;
	},		getValue: function(){		return this.selectedItem && this.selectedItem.value || this.getText();	},		setValue: function(value){				for(var controls = this.controls, i = 0; i < controls.length; i++){			if(controls[i].value === value){				this.setSelectedItem(controls[i]);				return this;			}		}				this.setText(value);		return this;	},		getForm: function () {
		return Dom.get(this._proxy && this._proxy.form);
	},		copyItemsFromSelect: function(select){		if(select.name){			this.setName(select.name);			select.name = '';		}		for(var node = select.firstChild; node; node = node.nextSibling) {			if(node.tagName  === 'OPTION') {				var item = this.controls.add(Dom.getText(node));									item.value = node.value;				if(node.selected){					this.setSelectedItem(item);				}			}		}				if(select.onclick)			this.dom.onclick = select.onclick;				if(select.onchange)			this.on('change', select.onchange);			}	}).addEvents({select:{}, change:{}});