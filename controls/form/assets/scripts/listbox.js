/** * @author  */imports("Controls.Form.ListBox");using("Controls.Core.ListControl");using("Controls.Form.IInputControl");var ListBox = ListControl.extend(IInputControl).implement({		xType: 'listbox',		selectedItem: null,		/**	 * 底层获取某项的选中状态。该函数仅仅检查界面。	 */	baseGetSelected: function (item) {		return item.getParent().hasClass('x-' + this.xType + '-selected');	},		/**	 * 底层设置某项的选中状态。该函数仅仅更新界面。	 */	baseSetSelected: function (item, value) {		item.getParent().toggleClass('x-' + this.xType + '-selected', value);		return this;	},		/**	 * 底层获取一项的值。
	 */	baseGetValue: function(item){		return item.value !== undefined ? item.value : item.getText();	},		init: function(options){		var select;		if(this.dom.tagName === 'SELECT'){			select = this.dom;			this.dom = this.create(options);			select.parentNode.replaceChild(this.dom, select);		}				this.base('init');				if(select)			this.copyItemsFromSelect(select);					this.on('click', this.onClick);	},		onClick: function (e) {		if(this.getDisabled() || this.getReadOnly())			return;		var me = this.controls, ul = this.container.dom, node = e.target;		while(node){			if(node.parentNode === ul){				for(var i = me.length; i--;){					if(me[i].dom.parentNode === node){						this.onItemClick(e, me[i]);						return;					}				}				break;			}			node = node.parentNode;		}	},		/**	 * 当用户点击一项时触发。	 */	onItemClick: function (e, item) {		if(this.trigger('itemclick', item)) {			this.toggleItem(item);		} else {			e.stop();			}	},		/**	 * 当选中的项被更新后触发。
	 */	onChange: function (value){		this.trigger('change', value);	},		/**	 * 当一个选项被选中时触发。
	 */	onSelect: function (value){		if(this._proxy)			this._proxy.value = this.getValue();		this.trigger('select', value);	},		getSelectedIndex: function () {		return this.controls.indexOf(this.getSelectedItem());	},		setSelectedIndex: function (value) {		return this.setSelectedItem(this.controls[value]);	},		/**	 * 设置某一项为选中状态。对于单选框，该函数会同时清除已有的选择项。	 */	setSelectedItem: function(item){		assert(item, "ListBox.prototype.setSelectedItem(item): {item} 不能为空。", item);		var old = this.selectedItem;		if(old)			this.baseSetSelected(old, false);		this.selectedItem = item;		this.baseSetSelected(item, true);				this.onSelect(item);		if(old !== item)			this.onChange(item);	},		/**	 * 获取当前选中的项。如果不存在选中的项，则返回 null 。
	 */	getSelectedItem: function () {		return this.selectedItem;	},		/**	 * 切换一项的选择状态。
	 */	toggleItem: function(item){		if(item === this.selectedItem){			this.clear();		} else {			this.setSelectedItem(item);		}				return  this;	},		/**	 * 反选择一项。	 */	clear: function () {		var item = this.selectedItem;		if(item){			this.selectedItem = null;			this.baseSetSelected(item, false);			this.onChange(item);		}					return  this;
	},		/**	 * 确保当前有至少一项被选择。
	 */	select: function () {		if(!this.selectedItem) {			this.setSelectedIndex(0);		}				return this;	},		/**	 * 获取指定索引的项的选择状态。
	 */	getSelected: function (index) {		if(index = this.controls[index]) {			return this.baseGetSelected(index);		}		return false;	},		/**	 * 设置指定索引的项的选择状态。但不会清空已有项。	 */	setSelected: function (index, value) {		if(index = this.controls[index]) {			var old = this.baseGetSelected(index);			this.baseSetSelected(index, value);			if(value)				this.onSelected(index);			if(old !== value)				this.onChanged(index);		}				return this;	},		/**	 * 查找并选中指定文本内容的项。如果没有项的文本和当前项相同，则清空选择状态。
	 */	setText: function (value) {		if(this.controls.each(function(item){			if(item.getText() === value){				this.setSelectedItem(item);				return false;			}		}, this))			this.clear();				return this;	},		/**	 * 获取选中项的文本内容。
	 */	getText: function () {		return this.selectedItem ? this.selectedItem.getText() : '';	},		setName: function (value) {
		if(!this._proxy){			this._proxy = Dom.parseNode('<input type="hidden">');			this._proxy.value = this.getValue();			this.dom.appendChild(this._proxy);		}				this._proxy.name = value;		return this;		
	},		getName: function () {
		return this._proxy && this._proxy.name;
	},		/**	 * 获取选中项的值，如果每天项被选中，则返回 null 。
	 */	getValue: function(){		return this.selectedItem ? this.baseGetValue(this.selectedItem) : this._proxy ? this._proxy.value : null;	},		/**	 * 查找并选中指定值内容的项。如果没有项的值和当前项相同，则清空选择状态。
	 */	setValue: function(value){				// 默认设置为值。		if(this._proxy)			this._proxy.value = value;				if(this.controls.each(function(item){			if(this.baseGetValue(item) === value){				this.setSelectedItem(item);				return false;			}		}, this))			this.clear();				return this;	},		getForm: function () {
		return Dom.get(this._proxy && this._proxy.form);
	},		copyItemsFromSelect: function(select){		if(select.name){			this.setName(select.name);			select.name = '';		}		for(var node = select.firstChild; node; node = node.nextSibling) {			if(node.tagName  === 'OPTION') {				var item = this.controls.add(Dom.getText(node));									item.value = node.value;				if(node.selected){					this.setSelectedItem(item);				}			}		}				if(select.onclick)			this.dom.onclick = select.onclick;				if(select.onchange)			this.on('change', select.onchange);			}	}).addEvents({select:{}, change:{}});