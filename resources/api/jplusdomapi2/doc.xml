<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='assets/styles/default.xsl'?>
<doc>
  <cat value="全局">
    <subcat value="对象">
      <function name="using" return="Undefined">
        <summary>使用一个名空间。</summary>
        <params type="名字空间。" name="ns">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
using("System.Dom.Keys");
&lt;/code&gt;</example>
        <example>
          <code>
using("System.Dom.Keys");
</code>
        </example>
        <return>
        </return>
      </function>
      <function name="imports" return="Undefined">
        <summary>导入指定名字空间表示的样式文件。</summary>
        <params type="名字空间。" name="ns">
          <summary>
          </summary>
        </params>
        <return>
        </return>
      </function>
      <function name="trace" return="Undefined">
        <summary>调试输出指定的信息。</summary>
        <params type="要输出的变量。" name="...">
          <summary>
          </summary>
        </params>
        <return>
        </return>
      </function>
      <function name="assert" return="Boolean">
        <summary>确认一个值正确。</summary>
        <params type="值。" name="bValue">
          <summary>
          </summary>
        </params>
        <params type="错误后的提示。" name="msg">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
assert(true, "{value} 错误。", value);
&lt;/code&gt;</example>
        <example>
          <code>
assert(true, "{value} 错误。", value);
</code>
        </example>
        <return>返回 bValue 。</return>
      </function>
    </subcat>
  </cat>
  <cat name="Object">
    <subcat value="静态成员" />
    <subcat>
      <function name="" return="Function">
        <return>
        </return>
      </function>
      <function name="extend" return="Base">
        <summary>复制对象的所有属性到其它对象。</summary>
        <params type="复制目标。" name="dest">
          <summary>
          </summary>
        </params>
        <params type="要复制的内容。" name="obj">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
var a = {v: 3}, b = {g: 2};
Object.extend(a, b);
trace(a); // {v: 3, g: 2}
&lt;/code&gt;</example>
        <example>
          <code>
var a = {v: 3}, b = {g: 2};
Object.extend(a, b);
trace(a); // {v: 3, g: 2}
</code>
        </example>
        <return>复制后的对象 (dest)。</return>
      </function>
      <function name="extendIf" return="Base">
        <summary>如果目标成员不存在就复制对象的所有属性到其它对象。</summary>
        <remark>var a = {v: 3, g: 5}, b = {g: 2};
Object.extendIf(a, b);
trace(a); // {v: 3, g: 5}  b 未覆盖 a 任何成员。
&lt;/code&gt;</remark>
        <params type="复制目标。" name="dest">
          <summary>
          </summary>
        </params>
        <params type="要复制的内容。" name="obj">
          <summary>
          </summary>
        </params>
        <return>复制后的对象 (dest)。</return>
      </function>
      <function name="each" return="Boolean">
        <summary>在一个可迭代对象上遍历。</summary>
        <params type="对象，不支持函数。" name="iterable">
          <summary>
          </summary>
        </params>
        <params type="对每个变量调用的函数。 &lt;param type=&quot;Object&quot; name=&quot;value&quot;&gt;当前变量的值&lt;/param&gt;&#xD;&#xA;&lt;param type=&quot;Number&quot; name=&quot;key&quot;&gt;当前变量的索引&lt;/param&gt; &lt;param type=&quot;Number&quot; name=&quot;index&quot;&gt;*            当前变量的索引&lt;/param&gt; &lt;param type=&quot;Array&quot; name=&quot;array&quot;&gt;数组本身&lt;/param&gt; &lt;return type=&quot;Boolean&quot;&gt;*            如果中止循环， 返回 false。&lt;/return&gt;" name="fn">
          <summary>
          </summary>
        </params>
        <params type="函数执行时的作用域。" name="bind">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt; 
Object.each({a: '1', c: '3'}, function (value, key) {
trace(key + ' : ' + value);
});
// 输出 'a : 1' 'c : 3'
&lt;/code&gt;</example>
        <example>
          <code> 
Object.each({a: '1', c: '3'}, function (value, key) {
trace(key + ' : ' + value);
});
// 输出 'a : 1' 'c : 3'
</code>
        </example>
        <return>如果已经遍历完所传的所有值， 返回 true， 如果遍历被中断过，返回 false。</return>
      </function>
      <function name="update" return="Base">
        <summary>更新一个可迭代对象。</summary>
        <params type="对象，不支持函数。" name="iterable">
          <summary>
          </summary>
        </params>
        <params type="对每个变量调用的函数。 &lt;param type=&quot;Object&quot; name=&quot;value&quot;&gt;当前变量的值&lt;/param&gt;&#xD;&#xA;&lt;param type=&quot;Number&quot; name=&quot;key&quot;&gt;当前变量的索引&lt;/param&gt; &lt;param type=&quot;Array&quot; name=&quot;array&quot;&gt;数组本身&lt;/param&gt;&#xD;&#xA;&lt;return type=&quot;Boolean&quot;&gt;如果中止循环， 返回 false。&lt;/return&gt;" name="fn">
          <summary>
          </summary>
        </params>
        <params type="函数执行时的作用域。" name="bind">
          <summary>
          </summary>
        </params>
        <params type="参数/是否间接传递。" name="args">
          <summary>
          </summary>
        </params>
        <example>该函数支持多个功能。主要功能是将一个对象根据一个关系变成新的对象。 &lt;code&gt;
Object.update(["aa","aa23"], "length", []); // =&gt; [2, 4];
Object.update([{a: 1},{a: 4}], "a", [{},{}], true); // =&gt; [{a: 1},{a: 4}];
&lt;/code&gt;</example>
        <example>该函数支持多个功能。主要功能是将一个对象根据一个关系变成新的对象。 <code>
Object.update(["aa","aa23"], "length", []); // =&gt; [2, 4];
Object.update([{a: 1},{a: 4}], "a", [{},{}], true); // =&gt; [{a: 1},{a: 4}];
</code></example>
        <return>返回的对象。</return>
      </function>
      <function name="isObject" return="Boolean">
        <summary>判断一个变量是否是引用变量。</summary>
        <params type="变量。" name="object">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
Object.isObject({}); // true
Object.isObject(null); // false
&lt;/code&gt;</example>
        <example>
          <code>
Object.isObject({}); // true
Object.isObject(null); // false
</code>
        </example>
        <return>所有对象变量返回 true, null 返回 false 。</return>
      </function>
      <function name="set" return="Undefined">
        <summary>将一个对象解析成一个类的属性。</summary>
        <params type="类实例。" name="obj">
          <summary>
          </summary>
        </params>
        <params type="参数。 这个函数会分析对象，并试图找到一个 属性设置函数。 当设置对象 obj 的 属性&#xD;&#xA;key 为 value: 发生了这些事: 检查，如果存在就调用: obj.setKey(value) 否则，&#xD;&#xA;检查，如果存在就调用: obj.key(value) 否则， 检查，如果存在就调用:&#xD;&#xA;obj.key.set(value) 否则，检查，如果存在就调用: obj.set(value) 否则，执行&#xD;&#xA;obj.key = value;" name="options">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
document.setA = function (value) {
this._a = value;
};
Object.set(document, 'a', 3); 
// 这样会调用     document.setA(3);
&lt;/code&gt;</example>
        <example>
          <code>
document.setA = function (value) {
this._a = value;
};
Object.set(document, 'a', 3); 
// 这样会调用     document.setA(3);
</code>
        </example>
        <return>
        </return>
      </function>
      <function name="type" return="String">
        <summary>返回一个变量的类型的字符串形式。</summary>
        <remark>array function element class date regexp object。</remark>
        <params type="变量。" name="obj">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt; 
Object.type(null); // "null"
Object.type(); // "undefined"
Object.type(new Function); // "function"
Object.type(+'a'); // "number"
Object.type(/a/); // "regexp"
Object.type([]); // "array"
&lt;/code&gt;</example>
        <example>
          <code> 
Object.type(null); // "null"
Object.type(); // "undefined"
Object.type(new Function); // "function"
Object.type(+'a'); // "number"
Object.type(/a/); // "regexp"
Object.type([]); // "array"
</code>
        </example>
        <return>所有可以返回的字符串： string number boolean undefined null</return>
      </function>
    </subcat>
  </cat>
  <cat name="Array">
    <subcat value="静态成员">
      <function name="each" return="Boolean">
        <summary>对数组运行一个函数。</summary>
        <params type="函数.参数 value, index" name="fn">
          <summary>
          </summary>
        </params>
        <params type="对象。" name="bind">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt; 
[2, 5].each(function (value, key) {
trace(value);
return false
});
// 输出 '2'
&lt;/code&gt;</example>
        <example>
          <code> 
[2, 5].each(function (value, key) {
trace(value);
return false
});
// 输出 '2'
</code>
        </example>
        <return>有无执行完。</return>
      </function>
      <function name="include" return="Boolean">
        <summary>包含一个元素。元素存在直接返回。</summary>
        <params type="值。" name="value">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
["", "aaa", "zzz", "qqq"].include(""); //   true
[false].include(0);	//   false
&lt;/code&gt;</example>
        <example>
          <code>
["", "aaa", "zzz", "qqq"].include(""); //   true
[false].include(0);	//   false
</code>
        </example>
        <return>是否包含元素。</return>
      </function>
      <function name="insert" return="Number">
        <summary>在指定位置插入项。</summary>
        <params type="插入的位置。" name="index">
          <summary>
          </summary>
        </params>
        <params type="插入的内容。" name="value">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
["", "aaa", "zzz", "qqq"].insert(3, 4); //   ["", "aaa", "zzz", 4, "qqq"]
&lt;/code&gt;</example>
        <example>
          <code>
["", "aaa", "zzz", "qqq"].insert(3, 4); //   ["", "aaa", "zzz", 4, "qqq"]
</code>
        </example>
        <return>
        </return>
      </function>
      <function name="invoke" return="Array">
        <summary>对数组成员调用指定的成员，返回结果数组。</summary>
        <params type="调用的成员名。" name="func">
          <summary>
          </summary>
        </params>
        <params type="调用的参数数组。" name="args">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
["vhd"].invoke('charAt', [0]); //    ['v']
&lt;/code&gt;</example>
        <example>
          <code>
["vhd"].invoke('charAt', [0]); //    ['v']
</code>
        </example>
        <return>结果。</return>
      </function>
      <function name="unique" return="Array">
        <summary>删除数组中重复元素。</summary>
        <example>&lt;code&gt;
[1,7,8,8].unique(); //    [1, 7, 8]
&lt;/code&gt;</example>
        <example>
          <code>
[1,7,8,8].unique(); //    [1, 7, 8]
</code>
        </example>
        <return>结果。</return>
      </function>
      <function name="remove" return="Number">
        <summary>删除元素, 参数为元素的内容。</summary>
        <params type="值。" name="value">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
[1,7,8,8].remove(7); //   1
&lt;/code&gt;</example>
        <example>
          <code>
[1,7,8,8].remove(7); //   1
</code>
        </example>
        <return>删除的值的位置。</return>
      </function>
      <function name="item" return="Base">
        <summary>获取指定索引的元素。如果 index &lt; 0， 则获取倒数 index 元素。</summary>
        <params type="元素。" name="index">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
[1,7,8,8].item(0); //   1
[1,7,8,8].item(-1); //   8
[1,7,8,8].item(5); //   undefined
&lt;/code&gt;</example>
        <example>
          <code>
[1,7,8,8].item(0); //   1
[1,7,8,8].item(-1); //   8
[1,7,8,8].item(5); //   undefined
</code>
        </example>
        <return>指定位置所在的元素。</return>
      </function>
      <function name="indexOf" return="Number">
        <summary>返回数组某个值的第一个位置。值没有,则为-1 。</summary>
        <params type="成员。" name="item">
          <summary>
          </summary>
        </params>
        <params type="开始查找的位置。" name="start">
          <summary>
          </summary>
        </params>
        <return>Number 位置，找不到返回 -1 。 现在大多数浏览器已含此函数.除了 IE8- 。</return>
      </function>
      <function name="filter" return="Array">
        <summary>对数组每个元素通过一个函数过滤。返回所有符合要求的元素的数组。</summary>
        <params type="函数。参数 value, index, this。" name="fn">
          <summary>
          </summary>
        </params>
        <params type="绑定的对象。" name="bind">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt; 
[1, 7, 2].filter(function (key) {return key &amp;lt; 5 })   [1, 2]
&lt;/code&gt;</example>
        <example>
          <code> 
[1, 7, 2].filter(function (key) {return key &lt; 5 })   [1, 2]
</code>
        </example>
        <return>新的数组。</return>
      </function>
      <function name="forEach" return="">
        <summary>对数组内的所有变量执行函数，并可选设置作用域。</summary>
        <params type="对每个变量调用的函数。 &lt;param type=&quot;Object&quot; name=&quot;value&quot;&gt;当前变量的值&lt;/param&gt;&#xD;&#xA;&lt;param type=&quot;Number&quot; name=&quot;key&quot;&gt;当前变量的索引&lt;/param&gt; &lt;param type=&quot;Number&quot; name=&quot;index&quot;&gt;*            当前变量的索引&lt;/param&gt; &lt;param type=&quot;Array&quot; name=&quot;array&quot;&gt;数组本身&lt;/param&gt;" name="fn">
          <summary>
          </summary>
        </params>
        <params type="函数执行时的作用域。" name="bind">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt; 
[2, 5].forEach(function (value, key) {
trace(value);
});
// 输出 '2' '5'
&lt;/code&gt;</example>
        <example>
          <code> 
[2, 5].forEach(function (value, key) {
trace(value);
});
// 输出 '2' '5'
</code>
        </example>
      </function>
    </subcat>
    <subcat>
      <function name="isArray" return="Boolean">
        <summary>判断一个变量是否是数组。</summary>
        <params type="变量。" name="object">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt; 
Array.isArray([]); // true
Array.isArray(document.getElementsByTagName("div")); // false
Array.isArray(new Array); // true
&lt;/code&gt;</example>
        <example>
          <code> 
Array.isArray([]); // true
Array.isArray(document.getElementsByTagName("div")); // false
Array.isArray(new Array); // true
</code>
        </example>
        <return>如果是数组，返回 true， 否则返回 false。</return>
      </function>
      <function name="create" return="Array">
        <summary>在原有可迭代对象生成一个数组。</summary>
        <params type="可迭代的实例。" name="iterable">
          <summary>
          </summary>
        </params>
        <params type="开始的位置。" name="startIndex">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
Array.create([4,6], 1); // [6]
&lt;/code&gt;</example>
        <example>
          <code>
Array.create([4,6], 1); // [6]
</code>
        </example>
        <return>复制得到的数组。</return>
      </function>
    </subcat>
  </cat>
  <cat name="String">
    <subcat value="静态成员">
      <function name="trim" return="String">
        <summary>去除首尾空格。</summary>
        <example>&lt;code&gt;
"   g h   ".trim(); //     "g h"
&lt;/code&gt;</example>
        <example>
          <code>
"   g h   ".trim(); //     "g h"
</code>
        </example>
        <return>处理后的字符串。</return>
      </function>
      <function name="toCamelCase" return="String">
        <summary>转为骆驼格式。</summary>
        <params type="内容。" name="value">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
"font-size".toCamelCase(); //     "fontSize"
&lt;/code&gt;</example>
        <example>
          <code>
"font-size".toCamelCase(); //     "fontSize"
</code>
        </example>
        <return>返回的内容。</return>
      </function>
      <function name="capitalize" return="String">
        <summary>将字符首字母大写。</summary>
        <example>&lt;code&gt;
"bb".capitalize(); //     "Bb"
&lt;/code&gt;</example>
        <example>
          <code>
"bb".capitalize(); //     "Bb"
</code>
        </example>
        <return>大写的字符串。</return>
      </function>
    </subcat>
    <subcat>
      <function name="format" return="String">
        <summary>格式化字符串。</summary>
        <params type="字符。" name="format">
          <summary>
          </summary>
        </params>
        <params type="参数。" name="...">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
String.format("{0}转换", 1); //  "1转换"
String.format("{1}翻译",0,1); // "1翻译"
String.format("{a}翻译",{a:"也可以"}); // 也可以翻译
String.format("{{0}}不转换, {0}转换", 1); //  "{0}不转换1转换"
格式化的字符串{}不允许包含空格。
不要出现{{{ 和  }}} 这样将获得不可预知的结果。
&lt;/code&gt;</example>
        <example>
          <code>
String.format("{0}转换", 1); //  "1转换"
String.format("{1}翻译",0,1); // "1翻译"
String.format("{a}翻译",{a:"也可以"}); // 也可以翻译
String.format("{{0}}不转换, {0}转换", 1); //  "{0}不转换1转换"
格式化的字符串{}不允许包含空格。
不要出现{{{ 和  }}} 这样将获得不可预知的结果。
</code>
        </example>
        <return>格式化后的字符串。</return>
      </function>
      <function name="map" return="Base">
        <summary>将一个数组源形式的字符串内容拷贝。</summary>
        <params type="字符串。用空格隔开。" name="str">
          <summary>
          </summary>
        </params>
        <params type="更新的函数或源。" name="source">
          <summary>
          </summary>
        </params>
        <params type="如果指明了， 则拷贝结果到这个目标。" name="dest">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
String.map("aaa bbb ccc", trace); //  aaa bbb ccc
String.map("aaa bbb ccc", function (v) { return v; }, {});    //    {aaa:aaa, bbb:bbb, ccc:ccc};
&lt;/code&gt;</example>
        <example>
          <code>
String.map("aaa bbb ccc", trace); //  aaa bbb ccc
String.map("aaa bbb ccc", function (v) { return v; }, {});    //    {aaa:aaa, bbb:bbb, ccc:ccc};
</code>
        </example>
        <return>
        </return>
      </function>
      <function name="ellipsis" return="String">
        <summary>把字符串转为指定长度。</summary>
        <params type="字符串。" name="value">
          <summary>
          </summary>
        </params>
        <params type="需要的最大长度。" name="len">
          <summary>
          </summary>
        </params>
        <example>&lt;code&gt;
String.ellipsis("123", 2); //   '1...'
&lt;/code&gt;</example>
        <example>
          <code>
String.ellipsis("123", 2); //   '1...'
</code>
        </example>
        <return>
        </return>
      </function>
      <function name="decodeUTF8" return="String">
        <summary>将字符串从 utf-8 字符串转义。</summary>
        <params type="字符串。" name="s">
          <summary>
          </summary>
        </params>
        <return>返回的字符串。</return>
      </function>
      <function name="fromCharCode" return="" />
      <function name="encodeUTF8" return="String">
        <summary>将字符串转为 utf-8 字符串。</summary>
        <params type="字符串。" name="s">
          <summary>
          </summary>
        </params>
        <return>返回的字符串。</return>
      </function>
    </subcat>
  </cat>
  <cat name="XMLHttpRequest">
    <subcat value="静态成员" />
    <subcat />
  </cat>
</doc>